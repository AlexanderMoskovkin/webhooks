{"version":3,"sources":["github.js"],"names":[],"mappings":"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","file":"github.js","sourcesContent":["import NodeGitHub from 'github';\r\n\r\nfunction makePromise (context, fn, args) {\r\n    return new Promise(function (resolve, reject) {\r\n        fn.apply(context, args.concat(function (err, res) {\r\n            if (err) {\r\n                console.log('ERROR:', err);\r\n                throw new Error(err);\r\n                reject(err);\r\n            }\r\n            else {\r\n                console.log(res);\r\n                resolve(res);\r\n            }\r\n        }));\r\n    });\r\n}\r\n\r\nexport default class GitHub {\r\n    constructor (user, repo, oauthToken) {\r\n        this.githubInitOptions = {\r\n            version:  \"3.0.0\",\r\n            // optional\r\n            protocol: \"https\",\r\n            host:     \"api.github.com\",\r\n            timeout:  5000\r\n        };\r\n\r\n        this.user = user;\r\n        this.repo = repo;\r\n\r\n        this.github = new NodeGitHub(this.githubInitOptions);\r\n        this.github.authenticate({\r\n            type:  'oauth',\r\n            token: oauthToken\r\n        });\r\n    }\r\n\r\n    //returns new branch name and branch commit sha\r\n    async createBranch (baseSha, branchName) {\r\n        var refName = 'refs/heads/' + branchName;\r\n\r\n        var msg = {\r\n            user: this.user,\r\n            repo: this.repo,\r\n            ref:  refName,\r\n            sha:  baseSha\r\n        };\r\n\r\n        return makePromise(this.github.gitdata, this.github.gitdata.createReference, [msg])\r\n            .then(function (data) {\r\n                return new Promise(resolve => resolve({\r\n                    branchName: refName,\r\n                    branchSha:  data.object.sha\r\n                }));\r\n            });\r\n    }\r\n\r\n    async deleteBranch (branchName) {\r\n        var refName = 'heads/' + branchName;\r\n\r\n        var msg = {\r\n            user: this.user,\r\n            repo: this.repo,\r\n            ref:  refName\r\n        };\r\n\r\n        return makePromise(this.github.gitdata, this.github.gitdata.deleteReference, [msg])\r\n            .then(function () {\r\n                return new Promise(resolve => resolve());\r\n            });\r\n    }\r\n\r\n    //returns new pull request number\r\n    async createPullRequest (title, base, head) {\r\n        var msg = {\r\n            user:  this.user,\r\n            repo:  this.repo,\r\n            title: title,\r\n            base:  base,\r\n            head:  head\r\n        };\r\n\r\n        return makePromise(this.github.pullRequests, this.github.pullRequests.create, [msg])\r\n            .then(function (res) {\r\n                return new Promise(resolve => resolve(res.number));\r\n            });\r\n    }\r\n\r\n    //returns the last commit sha\r\n    async mergePullRequest (commitSha, prNumber, message) {\r\n        var msg = {\r\n            user:           this.user,\r\n            repo:           this.repo,\r\n            sha:            commitSha,\r\n            number:         prNumber,\r\n            commit_message: message\r\n        };\r\n\r\n        return makePromise(this.github.pullRequests, this.github.pullRequests.merge, [msg])\r\n            .then(function (res) {\r\n                return new Promise(resolve => resolve(res.sha));\r\n            });\r\n    }\r\n\r\n    async createPullRequestComment (prNumber, comment) {\r\n        var msg = {\r\n            user:   this.user,\r\n            repo:   this.repo,\r\n            number: prNumber,\r\n            body:   comment\r\n        };\r\n\r\n        return makePromise(this.github.issues, this.github.issues.createComment, [msg])\r\n            .then(function (res) {\r\n                return new Promise(resolve => resolve(res));\r\n            });\r\n    }\r\n}"],"sourceRoot":"../src"}